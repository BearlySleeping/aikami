name: Build, Release and Deploy

on:
    push:
        tags:
            - 'v[0-9]+.[0-9]+.[0-9]+'
jobs:
    # TOD: fix memory out of bounds error
    build-export-web:
        name: Web Export
        runs-on: ubuntu-latest
        steps:
            - name: Checkout
              uses: actions/checkout@v4
            - uses: actions/setup-node@v4
              with:
                  node-version: 20
            - name: Install dependencies
              run: |
                  sudo apt-get update
                  sudo apt-get install -y rsync
            - name: ðŸ¤– Setup Godot
              uses: chickensoft-games/setup-godot@v1
              with:
                  version: 4.2.1
                  use-dotnet: false
            - name: Web Build
              run: |
                  mkdir -v -p build/webgl
                  cd game && godot --headless --verbose --export-release webgl
            - uses: FirebaseExtended/action-hosting-deploy@v0
              with:
                  repoToken: '${{ secrets.GITHUB_TOKEN }}'
                  firebaseServiceAccount: '${{ secrets.FIREBASE_SERVICE_ACCOUNT_AIKAMI_PROD }}'
                  channelId: live
                  projectId: aikami-prod
    # TODO: Make itch-publish action work
    # Current error: creating build on remote server: itch.io API error (400): /wharf/builds: invalid target
    # - uses: KikimoraGames/itch-publish@v0.0.3
    #   with:
    #       butlerApiKey: ${{secrets.BUTLER_API_KEY}}
    #       gameData: ./build/webgl
    #       itchUsername: ${{env.ITCH_USERNAME}}
    #       itchGameId: ${{ env.ITCH_GAME_ID }}
    #       buildChannel: webgl
    #       buildNumber: ${{ needs.version.outputs.version_hash }}
    build:
        strategy:
            matrix:
                config:
                    - { os: ubuntu-latest, platform: linux }
                    - { os: ubuntu-latest, platform: windows }
                    - { os: macos-latest, platform: macos }
        runs-on: ${{ matrix.config.os }}
        name: Build for ${{ matrix.config.platform }}
        steps:
            - name: Checkout
              uses: actions/checkout@v4
            - name: ðŸ¤– Setup Godot
              uses: chickensoft-games/setup-godot@v1
              with:
                  version: 4.2.1
                  use-dotnet: false
            - name: Setup Xcode
              if: matrix.config.platform == 'macos'
              uses: maxim-lobanov/setup-xcode@v1
              with:
                  xcode-version: latest
            - name: Build Game
              run: |
                  mkdir -v -p build/${{ matrix.config.platform }}
                  cd game && godot --headless --verbose --export-release ${{ matrix.config.platform }}
            - name: Archive files
              if: matrix.config.platform != 'macos'
              run: |
                  cd build/${{ matrix.config.platform }}
                  zip -r aikami-${{ matrix.config.platform }}.zip .
            - name: Archive Production Artifact
              uses: actions/upload-artifact@v4
              with:
                  name: ${{ matrix.config.platform }}
                  path: ./build/${{ matrix.config.platform }}/aikami-${{ matrix.config.platform }}.zip
    release:
        needs: [build]
        runs-on: ubuntu-latest
        steps:
            - name: Download All Artifacts
              uses: actions/download-artifact@v4
              with:
                  path: build
            - name: Release
              id: create-release
              uses: softprops/action-gh-release@v1
              with:
                  files: build/**/*.zip
                  token: ${{ secrets.RELEASE_TOKEN }}
            - name: Set Download URLs
              run: |
                  echo "Release output: ${{ toJson(steps.create-release.outputs) }}"
    deploy-landing-page:
        needs: [release]
        runs-on: ubuntu-latest
        steps:
            - name: Checkout
              uses: actions/checkout@v4
            - name: Setup Bun
              uses: oven-sh/setup-bun@v1
            - name: Install Astro Landing Page Dependencies
              run: |
                  cd landing-page
                  bun install
            - name: Build Astro Landing Page
              run: |
                  cd landing-page
                  bun run build
              env:
                  RELEASE_TAG: ${{ github.ref_name }}
            - name: Deploy Astro Landing Page to Firebase
              uses: FirebaseExtended/action-hosting-deploy@v0
              with:
                  repoToken: '${{ secrets.GITHUB_TOKEN }}'
                  entryPoint: 'landing-page'
                  firebaseServiceAccount: '${{ secrets.FIREBASE_SERVICE_ACCOUNT_AIKAMI_PROD }}'
                  channelId: live
                  projectId: aikami-prod
